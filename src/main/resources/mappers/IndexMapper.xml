<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.holden.wxproject.mapper.IndexMapper">
    <select id="MA" resultType="com.holden.wxproject.pojo.StockDTO">
        select code, closing_price
        from df_stock
        where code = #{code}
          and #{date} >= ds
        order by ds desc limit #{day};
    </select>

    <select id="MALIST" resultType="java.util.Map">
        select *
        from (SELECT ds,
                     avg(closing_price) OVER ( PARTITION BY CODE ORDER BY ds ROWS BETWEEN ${day-1} PRECEDING AND CURRENT ROW ) AS
        MA
              FROM df_stock
              WHERE CODE = #{code}
                AND (substr(ds, 1, 4) in (#{year})
                  or (ds >= DATE_ADD(concat(#{year}, '-01-01'), interval -${day} day) and
                      concat(#{year}, '-01-01') > ds))) a
        where substr(ds, 1, 4) = #{year}
    </select>

    <select id="BIASLIST" resultType="java.util.Map">
        select *
        from (
                 SELECT ds, (closing_price - avg${day}) * 100 / avg${day} AS bias
                 FROM (
                          SELECT ds,
                                 closing_price,
                                 AVG(closing_price) OVER ( PARTITION BY CODE ORDER BY ds ROWS BETWEEN ${day-1} PRECEDING AND CURRENT ROW ) AS avg${day}
                          FROM df_stock
                          WHERE CODE = #{code}
                            AND (substr(ds, 1, 4) in (#{year})
                              or (ds >= DATE_ADD(concat(#{year}, '-01-01'), interval -${day} day) and
                                  concat(#{year}, '-01-01') > ds))
                      ) a
             ) b
        where substr(ds, 1, 4) = #{year}
    </select>

    <select id="WRLIST" resultType="java.util.Map">
        SELECT *
        FROM (SELECT ds,
                     (highest${day} - closing_price) * 100 / IF((highest${day} - lowest${day}) = 0,
                                                                1,
                                                                highest${day} - lowest${day}
                         ) AS WR
              FROM (
                       SELECT ds,
                              closing_price,
                              MAX(highest) OVER ( PARTITION BY CODE ORDER BY ds ROWS BETWEEN ${day-1} PRECEDING AND CURRENT ROW ) AS highest${day}, MIN(lowest) OVER ( PARTITION BY CODE ORDER BY ds ROWS BETWEEN ${day-1} PRECEDING AND CURRENT ROW ) AS lowest${day}
                       FROM df_stock
                       WHERE CODE = #{code}
                         AND (
                                   substr(ds, 1, 4) IN (#{year})
                               OR (ds >= DATE_ADD(concat(#{year}, '-01-01'), INTERVAL -${day} DAY) AND
                                   concat(#{year}, '-01-01') > ds))
                   ) a
             ) b
        WHERE substr(ds, 1, 4) = #{year};
    </select>

    <select id="ASILIST" resultType="java.util.Map">
        SELECT ds,
               SUM(
                                   16 * x / r *
                                   IF
                                       (aa > bb, aa,
                                        bb)) OVER (ORDER BY ds ROWS BETWEEN ${day-1} PRECEDING AND CURRENT ROW ) AS asi
        FROM (
                 SELECT *,
                        IF
                            (
                                        aa > bb
                                    AND aa > cc,
                                        aa + bb / 2 + dd / 4,
                                        IF
                                            (bb > cc AND bb > aa, bb + aa / 2 + dd / 4, cc + dd / 4)) AS r,
                        closing_price - last_closing + (closing_price - opening_price) / 2 + last_closing -
                        last_opening                                                                  AS x
                 FROM (
                          SELECT *,
                                 abs(highest - last_closing)      AS aa,
                                 abs(lowest - last_closing)       AS bb,
                                 abs(highest - last_low)          AS cc,
                                 abs(last_closing - last_opening) AS dd
                          FROM (
                                   SELECT ds,
                                          closing_price,
                                          `code`,
                                          highest,
                                          lowest,
                                          opening_price,
                                          last_closing,
                                          lag(lowest, 1) over (ORDER BY ds ) AS last_low, lag(opening_price, 1) over (ORDER BY ds ) AS last_opening
                                   FROM `df_stock`
                                   WHERE CODE = #{code}
                                     AND (
                                               substr(ds, 1, 4) IN (#{year})
                                           OR (ds >= DATE_ADD(concat(#{year}, '-01-01'), INTERVAL -${day} DAY) AND
                                               concat(#{year}, '-01-01') > ds))
                               ) a
                      ) b
             ) c
        where substr(ds, 1, 4) = #{year}
    </select>

    <select id="ROCLIST" resultType="java.util.Map">
        SELECT *
        FROM (SELECT ds,
                     (highest${day} - closing_price) * 100 / IF((highest${day} - lowest${day}) = 0,
                                                                1,
                                                                highest${day} - lowest${day}
                         ) AS WR${day}
              FROM (
                       SELECT ds,
                              closing_price,
                              FIRST_VALUE(closing_price) OVER ( PARTITION BY CODE ORDER BY ds ROWS BETWEEN ${day-1} PRECEDING AND CURRENT ROW ) pre_day
                       FROM df_stock
                       WHERE CODE = #{code}
                         AND (
                                   substr(ds, 1, 4) IN (#{year})
                               OR (ds >= DATE_ADD(concat(#{year}, '-01-01'), INTERVAL -${day} DAY) AND
                                   concat(#{year}, '-01-01') > ds))
                   ) a
             ) b
        WHERE substr(ds, 1, 4) = #{year};
    </select>

    <select id="ENELIST" resultType="java.util.Map">
        SELECT ds, upper_ene, lower_ene, ((upper_ene + lower_ene) / 2) AS ene
        FROM (
                 SELECT *,
                        (1 + 6 / 100) * c AS upper_ene,
                        (1 - 6 / 100) * c AS lower_ene
                 FROM (
                          SELECT ds,
                                 closing_price,
                                 `code`,
                                 IF
                                     (
                                         ROW_NUMBER() OVER ( ORDER BY ds ) >= ${day},
                                         AVG(closing_price) OVER ( ORDER BY ds ROWS BETWEEN ${day-1} PRECEDING AND CURRENT ROW),
                                         0
                                     ) AS c
                          FROM `df_stock`
                          WHERE CODE = #{code}
                            AND (
                                      substr(ds, 1, 4) IN (#{year})
                                  OR (ds >= DATE_ADD(concat(#{year}, '-01-01'), INTERVAL -${day} DAY) AND
                                      concat(#{year}, '-01-01') > ds))
                      ) a
             ) b
        where substr(ds, 1, 4) = #{year}
    </select>

    <select id="BBILIST" resultType="java.util.Map">
        SELECT ds,
               IFnull((MA3 + MA6 + MA12 + MA24) / 4, 0) AS BBI
        FROM (
                 SELECT ds,
                        IFnull(avg(closing_price) OVER ( PARTITION BY CODE ORDER BY ds ROWS BETWEEN 2 PRECEDING AND CURRENT ROW ), 0)  AS MA3,
                        IFnull(avg(closing_price) OVER ( PARTITION BY CODE ORDER BY ds ROWS BETWEEN 5 PRECEDING AND CURRENT ROW ), 0)  AS MA6,
                        IFnull(avg(closing_price) OVER ( PARTITION BY CODE ORDER BY ds ROWS BETWEEN 11 PRECEDING AND CURRENT ROW ), 0) AS MA12,
                        IFnull(avg(closing_price) OVER ( PARTITION BY CODE ORDER BY ds ROWS BETWEEN 23 PRECEDING AND CURRENT ROW ), 0) AS MA24
                 FROM `df_stock`
                 WHERE CODE = #{code}
                   AND (
                             substr(ds, 1, 4) IN (#{year})
                         OR (ds >= DATE_ADD(concat(#{year}, '-01-01'), INTERVAL -${day} DAY) AND
                             concat(#{year}, '-01-01') > ds))
             ) a
        where substr(ds, 1, 4) = #{year}
    </select>

    <select id="PSYLIST" resultType="java.util.Map">
        select *
        from (
                 SELECT ds,
                        avg(IF(closing_price > last_closing, 1, 0)) OVER ( PARTITION BY CODE ORDER BY ds ROWS BETWEEN ${day-1} PRECEDING AND CURRENT ROW )*100 AS psy
                 FROM `df_stock`
                 where code = #{code}
                   AND (
                             substr(ds, 1, 4) IN (#{year})
                         OR (ds >= DATE_ADD(concat(#{year}, '-01-01'), INTERVAL -${day} DAY) AND
                             concat(#{year}, '-01-01') > ds))
             ) a
        where substr(ds, 1, 4) = #{year}
    </select>

    <select id="KDJLIST" resultType="java.util.Map">
        select ds, k, d, j
        from df_stock
        where code = #{code}
          and substr(ds, 1, 4) = #{year}
    </select>

    <select id="MTMLIST" resultType="java.util.Map">
        select *
        from (SELECT ds,
                     closing_price - LAG(closing_price, ${day}, closing_price) OVER ( PARTITION BY CODE ORDER BY ds ) AS mtm
              FROM `df_stock`
              WHERE CODE = #{code}
                AND (
                          substr(ds, 1, 4) IN (#{year})
                      OR (ds >= DATE_ADD(concat(#{year}, '-01-01'), INTERVAL -${day} DAY) AND
                          concat(#{year}, '-01-01') > ds))) a
        where substr(ds, 1, 4) = #{year}
    </select>

    <select id="BRARLIST" resultType="java.util.Map">
        SELECT ds,
               ifnull(
                       SUM(br1) OVER (ORDER BY ds ROWS BETWEEN ${day-1} PRECEDING AND CURRENT ROW) * 100 / SUM(br2)
                           OVER(ORDER BY ds ROWS BETWEEN ${day-1} PRECEDING AND CURRENT ROW),
                       0
                   ) AS br,
               ifnull(
                       SUM(ar1) OVER (ORDER BY ds ROWS BETWEEN ${day-1} PRECEDING AND CURRENT ROW) * 100 / SUM(ar2)
                           OVER(ORDER BY ds ROWS BETWEEN ${day-1} PRECEDING AND CURRENT ROW),
                       0
                   ) AS ar
        FROM (
                 SELECT ds,
                        IF
                            (highest - last_closing > 0, highest - last_closing, 0) AS br1,
                        IF
                            (last_closing - lowest > 0, last_closing - lowest, 0)   AS br2,
                        highest - opening_price                                     AS ar1,
                        opening_price - lowest                                      AS ar2
                 FROM `df_stock`
                 WHERE CODE = #{code}
                   AND (
                             substr(ds, 1, 4) IN (#{year})
                         OR (ds >= DATE_ADD(concat(#{year}, '-01-01'), INTERVAL -${day} DAY) AND
                             concat(#{year}, '-01-01') > ds))
             ) a
        where substr(ds, 1, 4) = #{year}
    </select>

    <select id="ATRLIST" resultType="java.util.Map">
        SELECT ds,
               IF
                   (
                       ROW_NUMBER() OVER ( ORDER BY ds ) >= ${day},
                       AVG(mtr) OVER ( ORDER BY ds ROWS BETWEEN ${day-1} PRECEDING AND CURRENT ROW),
                       0
                   ) AS ATR
        FROM (
                 SELECT ds,
                        IF
                            (
                                    hsl > lh,
                                    IF
                                        (hsl > ll, hsl, ll),
                                    IF
                                        (lh > ll, lh, ll)) AS mtr
                 FROM (
                          SELECT ds,
                                 abs(last_closing - highest) AS lh,
                                 abs(last_closing - lowest)  AS ll,
                                 highest - lowest            AS hsl
                          FROM `df_stock`
                          WHERE CODE = #{code}
                            AND (
                                      substr(ds, 1, 4) IN (#{year})
                                  OR (ds >= DATE_ADD(concat(#{year}, '-01-01'), INTERVAL -${day} DAY) AND
                                      concat(#{year}, '-01-01') > ds))
                      ) a
             ) b
        where substr(ds, 1, 4) = #{year}
    </select>

    <select id="MACDLIST" resultType="java.util.Map">
        select ds, dif, dea, macd
        from df_stock
        where code = #{code}
          and substr(ds, 1, 4) = #{year}
    </select>

    <select id="EMVLIST" resultType="java.util.Map">
        SELECT ds,
               round(
                       AVG(mid * volume * (highest - lowest) / h_l) OVER (ORDER BY ds ROWS BETWEEN ${day-1} PRECEDING
                           AND CURRENT ROW),
                       ${circle}
                   ) AS emv
        FROM (
                 SELECT ds,
                        highest,
                        lowest,
                        h_l,
                        100 * (highest + lowest - last_hl) / (highest + lowest) AS mid,
                        volume
                 FROM (
                          SELECT ds,
                                 highest,
                                 lowest,
                                 AVG(deal_vol) OVER (ORDER BY ds ROWS BETWEEN ${day-1} PRECEDING AND CURRENT ROW ) / deal_vol AS volume, LAG(highest + lowest, 1, highest + lowest) OVER (ORDER BY ds ) AS last_hl, AVG(highest - lowest) OVER (ORDER BY ds ROWS BETWEEN ${day-1} PRECEDING AND CURRENT ROW ) AS h_l
                          FROM df_stock
                          WHERE CODE = #{code}
                            AND (
                                      substr(ds, 1, 4) IN (#{year})
                                  OR (ds >= DATE_ADD(concat(#{year}, '-01-01'), INTERVAL -${day} DAY) AND
                                      concat(#{year}, '-01-01') > ds))
                      ) a
             ) b
        where substr(ds, 1, 4) = #{year}
    </select>

    <select id="DPOLIST" resultType="java.util.Map">
        SELECT ds,
               closing_price - LAG(MA, ${circle}, MA) OVER ( ORDER BY ds ) dpo
        FROM (
                 SELECT ds,
                        closing_price,
                        avg(closing_price) OVER ( ORDER BY ds ROWS BETWEEN ${day-1} PRECEDING AND CURRENT ROW ) AS MA
                 FROM `df_stock`
                 WHERE CODE = #{code}
                   AND (
                             substr(ds, 1, 4) IN (#{year})
                         OR (ds >= DATE_ADD(concat(#{year}, '-01-01'), INTERVAL -${day} DAY) AND
                             concat(#{year}, '-01-01') > ds))
             ) a
        where substr(ds, 1, 4) = #{year}
    </select>

    <select id="BIAS" resultType="com.holden.wxproject.pojo.StockDTO">
        select code, closing_price
        from df_stock
        where code = #{code}
          and #{date} >= ds
        order by ds desc limit #{day};
    </select>

    <select id="WR" resultType="com.holden.wxproject.pojo.StockDTO">
        select code, closing_price, highest, lowest
        from df_stock
        where code = #{code}
        order by ds desc limit #{day};
    </select>

    <select id="num" resultType="java.lang.Integer">
        select count(1) as num
        from df_stock
        where code = #{code}
    </select>

    <select id="List" resultType="com.holden.wxproject.pojo.StockDTO">
        select code,
               closing_price,
               highest,
               lowest,
               ds,
               opening_price,
               deal_vol,
               deal_amount
        from df_stock
        where code = #{code}
          and #{date} >= ds
        order by ds desc limit #{day};
    </select>

    <select id="targetDate" resultType="com.holden.wxproject.pojo.StockDTO">
        select code,
               closing_price,
               highest,
               lowest,
               ds,
               opening_price,
               deal_vol
        from df_stock
        where code = #{code}
          and ds = #{date} limit 1;
    </select>

    <select id="ifExecute" resultType="java.lang.String">
        select ds
        from df_calendar
        where Astatus = 1
          and ds = #{date} limit 1
    </select>

    <select id="lastExecute" resultType="java.lang.String">
        SELECT ds
        FROM df_calendar
        WHERE Astatus = 1
          AND #{date} > ds
        order by ds desc limit 1;
    </select>

    <select id="getPreDate" resultType="java.lang.String">
        SELECT ds
        FROM df_calendar
        WHERE Astatus = 1
          AND #{date} >= ds
        order by ds desc limit #{day};
    </select>

    <select id="getHighest" resultType="java.lang.Double">
        select highest
        from df_stock
        where code = #{code}
          and ds = #{date} limit 1
    </select>

    <select id="getLowest" resultType="java.lang.Double">
        select lowest
        from df_stock
        where code = #{code}
          and ds = #{date} limit 1
    </select>

    <select id="getClosingPrice" resultType="java.lang.Double">
        select closing_price
        from df_stock
        where code = #{code}
          and ds = #{date} limit 1
    </select>

    <select id="getTargetDate" resultType="java.lang.String">
        SELECT ds
        FROM df_calendar
        WHERE Astatus = 1
          AND #{date} >= ds
        order by ds desc limit #{day}, 1;
    </select>

    <select id="current" resultType="com.holden.wxproject.pojo.StockDTO">
        select code,
               closing_price,
               highest,
               lowest,
               ds,
               opening_price,
               deal_vol
        from df_stock
        where code = #{code}
          and ds = #{date} limit 1;
    </select>

    <select id="AVG" resultType="java.lang.Double">
        SELECT avg(${field}) AS field
        FROM (SELECT *
              FROM df_stock
              WHERE CODE = #{code}
                AND #{date} >= ds
              ORDER BY ds DESC LIMIT #{day}) a
    </select>

    <select id="HIGH" resultType="java.lang.Double">
        SELECT max(${field}) AS field
        FROM (SELECT *
              FROM df_stock
              WHERE CODE = #{code}
                AND #{date} >= ds
              ORDER BY ds DESC LIMIT #{day}) a
    </select>

    <select id="LOW" resultType="java.lang.Double">
        SELECT min(${field}) AS field
        FROM (SELECT *
              FROM df_stock
              WHERE CODE = #{code}
                AND #{date} >= ds
              ORDER BY ds DESC LIMIT #{day}) a
    </select>

    <select id="recursiveIndex" resultType="java.util.Map">
        SELECT *
        FROM `df_stock`
        where code = #{code}
          and ds = #{date} limit 1
    </select>

    <select id="oneRow" resultType="com.holden.wxproject.pojo.resp.OneRowResp">
        SELECT ifnull(round(sum(main_inflow + Slarge_inflow + large_inflow), 0), '今日无数据') AS mainFlow,
               ifnull(round(sum(mid_inflow + small_inflow), 0), '今日无数据')                  AS smallFlow,
               ifnull(concat(max(up_down_rate), '%'), '今日无数据')                            as upRate,
               ifnull(concat(min(up_down_rate), '%'), '今日无数据')                            as downRate,
               ifnull(round(sum(outer_disk), 0), '今日无数据')                                 as outside,
               ifnull(round(sum(inner_disk), 0), '今日无数据')                                 as `inner`,
               ifnull(round(sum(deal_vol), 0), '今日无数据')                                   as dealVol,
               ifnull(max(highest), '今日无数据')                                              as highest
        FROM `df_a_stock_detail`
        WHERE ds = (select max(ds) from df_a_stock_detail)
    </select>

    <select id="twoRow" resultType="com.holden.wxproject.pojo.resp.TwoRowResp">
        SELECT `ds`,
               round(sum(main_inflow + Slarge_inflow + large_inflow) / 10000, 0) AS big,
               round(sum(mid_inflow + small_inflow) / 10000, 0)                  AS small
        FROM `df_a_stock_detail`
        GROUP BY ds
        ORDER BY ds LIMIT 25
    </select>

    <select id="threeRow" resultType="com.holden.wxproject.pojo.resp.ThreeRowResp">
        SELECT industry as `name`,
               count(1) AS `value`
        FROM `df_a_stock_detail`
        WHERE ds = (select max(ds) from df_a_stock_detail)
          AND industry !='0.0'
        AND industry IS NOT NULL
        GROUP BY
            industry
            limit 15;
    </select>

    <select id="fourRow" resultType="com.holden.wxproject.pojo.resp.FourRowResp">
        SELECT `CODE`,
               `NAME`,
               up_down_rate  as upDownRate,
               current_price as currentPrice,
               PE_ratio_d    as pe,
               round(deal_amount,0)   as dealAmount,
               industry
        FROM `df_a_stock_detail`
        WHERE ds = (select max(ds) from df_a_stock_detail)
          AND board IN (2, 6)
        ORDER BY up_down_rate DESC LIMIT 30
    </select>

    <select id="newInfo" resultType="com.holden.wxproject.pojo.resp.NewsInfoResp">
        select code, mediaName as agency, title as content, notice_date as date
        from df_a_stock_news limit 30
    </select>

    <select id="boardInfo" resultType="com.holden.wxproject.pojo.resp.BoardResp">
        SELECT count(
                       DISTINCT
                       IF
                           (board = 2, CODE, NULL))  as sh,
               count(
                       DISTINCT
                       IF
                           (board = 6, CODE, NULL))  as sz,
               count(
                       DISTINCT
                       IF
                           (board = 80, CODE, NULL)) as bj,
               count(
                       DISTINCT
                       IF
                           (board = 23, CODE, NULL)) as cy
        FROM df_a_stock_detail
        where ds = (select max(ds) from df_a_stock_detail)
    </select>
    <select id="industryReport" resultType="com.holden.wxproject.pojo.resp.IndustryReport">
        SELECT `NAME`,
               report_content as reportName,
               east_rank      as rank
        FROM `df_a_stock_industry_report`
    </select>

    <select id="chance" resultType="com.holden.wxproject.pojo.resp.ChanceResp">
        SELECT `CODE`,
               TOTAL_SCORE        as totalScore,
               RISE_1_PROBABILITY as probability,
               STOCK_RANK_RATIO   as rankRatio,
               AVERAGE_1_INCREASE as increase
        FROM `df_a_stock_chance`
        ORDER BY RISE_1_PROBABILITY DESC LIMIT 5
    </select>

    <select id="bigIndex" resultType="com.holden.wxproject.pojo.resp.IndexResp">
        SELECT `date`,
               opening_price as open,
               closing_price as close,
               lowest,
               highest
        FROM `df_a_index_day_kline`
        WHERE `index` = '000001'
        ORDER BY
            date
            LIMIT 30
    </select>

</mapper>